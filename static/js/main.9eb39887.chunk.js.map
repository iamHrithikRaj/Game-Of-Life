{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","href","rel","style","fontSize","onClick","Math","random","display","gridTemplateColumns","map","col","newGrid","width","height","background","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAOMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAE7C,OAAOH,GA8GMK,MA3Gf,WAAe,MAEWC,oBAAS,WAC/B,OAAOP,OAHI,mBAENQ,EAFM,KAEAC,EAFA,OAKiBF,oBAAS,GAL1B,mBAKNG,EALM,KAKGC,EALH,KAOPC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EACrB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GAEP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GAAKA,EA5Cf,IA4CiCC,GAAQ,GAAKA,EA3C9C,KA4CAL,GAAaJ,EAAEQ,GAAMC,OAGrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAdZA,EAAI,EAAGA,EApCV,KAoCyBA,EAAI,EAA1BA,IADFlB,EAAI,EAAGA,EApCR,GAoCqBA,IAAM,EAA1BA,SAsBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,sBAAKa,UAAU,MAAf,UACE,sBACEC,KAAK,kEACLC,IAAI,eAEN,oBAAIC,MAAO,CAAE,cAAe,YAAaC,SAAU,OAAO,OAAU,QAApE,0BAGA,wBACEC,QAAS,WACPtB,GAAYD,GACZE,EAAWE,SAAU,EACrBC,KAJJ,SAOGL,EAAU,OAAS,UAEtB,wBACEuB,QAAS,WACPxB,EAAQT,MAFZ,mBAOA,wBACEiC,QAAS,WAEP,IADA,IAAMhC,EAAO,GACJC,EAAI,EAAGA,EAzFV,GAyFuBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAzFjB,KAyFiC,kBAAM8B,KAAKC,SAAW,GAAK,EAAI,MAEtE1B,EAAQR,IANZ,oBAWA,qBACE8B,MAAO,CACLK,QAAS,OACTC,oBAAoB,UAAD,OAnGb,GAmGa,YAHvB,SAMG7B,EAAK8B,KAAI,SAACrC,EAAMC,GAAP,OACRD,EAAKqC,KAAI,SAACC,EAAKnB,GAAN,OACP,qBAEEa,QAAS,WACP,IAAMO,EAAUtB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKD,EAASjB,GAAGkB,GAAK,EAAI,KAExCX,EAAQ+B,IAEVT,MAAO,CACLU,MAAO,GACPC,OAAQ,GACRC,WAAYnC,EAAKN,GAAGkB,GAChB,sDACA,oDACJwB,OAAQ,qBAdZ,UACU1C,EADV,YACekB,gBClGZyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9eb39887.chunk.js","sourcesContent":["import \"./App.css\";\nimport produce from \"immer\";\nimport React, { useCallback, useState, useRef } from \"react\";\n\nconst numRows = 36;\nconst numCols = 96;\n\nconst operations = [\n  [0, 1],\n  [0, 1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nfunction App() {\n  // eslint-disable-next-line\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; ++j) {\n            //TODO\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              //checking the bounds\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Italianno&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      <h1 style={{ \"font-family\": \"Italianno\", fontSize: \"80px\",\"margin\": '10px'}}>\n        Game Of Life\n      </h1>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          runningRef.current = true;\n          runSimulation();\n        }}\n      >\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(Array.from(Array(numCols), () => Math.random() > .8 ? 1 : 0));\n          }\n          setGrid(rows);\n        }}\n      >\n        Random\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][j] = gridCopy[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                background: grid[i][j]\n                  ? \"linear-gradient(to right, #6a11cb 0%, #2575fc 100%)\"\n                  : \"linear-gradient(120deg, #84fab0 0%, #8fd3f4 100%)\",\n                border: \"solid 0.5px #333\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}